pipeline:
  00-cache:
    group: 00-setup
    image: redwebaps/redform-cache:dev
    pull: true
    commands:
      # Aesir Composer cache
      # - mv /opt/cache/aesir/vendor .
      - touch tests/.cache.composer.tmp
      # Aesir npm cache
      - mv /opt/cache/aesir/node_modules .
      - touch tests/.cache.npm.tmp
      # Aesir Libraries Composer cache
      - mv /opt/cache/aesir/libraries/reditem/vendor libraries/reditem
      - touch tests/.cache.composer.library.tmp
      # Joomla CMS
      # - mv /opt/cache/joomla-cms tests
      # - touch tests/.cache.joomla-cms.tmp

      # Aesir Core
      - mkdir -p tests/extension/aesir-core
      - gpg --pinentry-mode loopback --passphrase "6f8f19c330a0f899458e4b0670824deb8cdfe391" -o /opt/cache/aesir-core.tgz --decrypt /opt/cache/aesir-core.tgz.gpg
      - tar -xzf /opt/cache/aesir-core.tgz -C tests/extension/aesir-core
      - touch tests/.cache.aesir-core.tmp

      # redFORM
      - mkdir -p tests/extension/redFORM
      - gpg --pinentry-mode loopback --passphrase "6f8f19c330a0f899458e4b0670824deb8cdfe391" -o /opt/cache/redFORM.tgz --decrypt /opt/cache/redFORM.tgz.gpg
      - tar -xzf /opt/cache/redFORM.tgz -C tests/extension/redFORM
      - touch tests/.cache.redFORM.tmp
      # redSHOP
      - mkdir -p tests/extension/redSHOP
      - gpg --pinentry-mode loopback --passphrase "6f8f19c330a0f899458e4b0670824deb8cdfe391" -o /opt/cache/redSHOP.tgz --decrypt /opt/cache/redSHOP.tgz.gpg
      - tar -xzf /opt/cache/redSHOP.tgz -C tests/extension/redSHOP
      - touch tests/.cache.redSHOP.tmp
      # redCOMPONENT Template
      - mkdir -p tests/extension/wright
      - gpg --pinentry-mode loopback --passphrase "6f8f19c330a0f899458e4b0670824deb8cdfe391" -o /opt/cache/wright.tgz --decrypt /opt/cache/wright.tgz.gpg
      - tar -xzf /opt/cache/wright.tgz -C tests/extension/wright
      - touch tests/.cache.wright.tmp

      # Aesir Template
      - mkdir -p tests/extension/previous
      - gpg --pinentry-mode loopback --passphrase "6f8f19c330a0f899458e4b0670824deb8cdfe391" -o /opt/cache/previous.tgz --decrypt /opt/cache/previous.tgz.gpg
      - tar -xzf /opt/cache/previous.tgz -C tests/extension/previous
      - touch tests/.cache.previous.tmp
      - cd tests/extension/previous
      - cp -R /opt/cache/previous/node_modules .
      - cp -R /opt/cache/previous/vendor .
      - cp -R /opt/cache/previous/libraries .
      - cd ../../../
      - cp gulp-config.json.dist.previous tests/extension/previous/
      - cd tests/extension/previous
      - mv gulp-config.json.dist.previous gulp-config.json
      - gulp release:reditem --skip-version
      - cd ../../../

      # Aesir-kvasir Template
      - mkdir -p tests/extension/aesir-kvasir
      - gpg --pinentry-mode loopback --passphrase "6f8f19c330a0f899458e4b0670824deb8cdfe391" -o /opt/cache/aesir-kvasir.tgz --decrypt /opt/cache/aesir-kvasir.tgz.gpg
      - tar -xzf /opt/cache/aesir-kvasir.tgz -C tests/extension/aesir-kvasir
      - touch tests/.cache.aesir-kvasir.tmp
      - cd tests/extension/aesir-kvasir
      - cp -R /opt/cache/aesir-kvasir/node_modules .
      - cp -R /opt/cache/aesir-kvasir/build .
      - cp -R /opt/cache/aesir-kvasir/vendor .
      - cp -R node_modules build
      - mv vendor extensions/libraries/kvasir/
      - cd build
      - cp gulp-config.json.dist gulp-config.json
      - gulp release --skip-version
      - cd ..
      - cd tests/releases
      - pwd
      - cd ../../../../../

      # AesirEc Template
      - pwd
      - mkdir -p tests/extension/aesir-e-commerce
      - gpg --pinentry-mode loopback --passphrase "6f8f19c330a0f899458e4b0670824deb8cdfe391" -o /opt/cache/aesir-e-commerce.tgz --decrypt /opt/cache/aesir-e-commerce.tgz.gpg
      - tar -xzf /opt/cache/aesir-e-commerce.tgz -C tests/extension/aesir-e-commerce
      - touch tests/.cache.aesir-e-commerce.tmp
      - cd tests/extension/aesir-e-commerce
      - cp -R /opt/cache/aesir-e-commerce/build .
      - cp -R /opt/cache/aesir-e-commerce/tests .
      - cp -R /opt/cache/aesir-e-commerce/node_modules .
      - mv node_modules/ build/
      - npm install
      - composer global require hirak/prestissimo
      - composer install --working-dir ./extensions/libraries/redshopb --ansi
      - composer install --working-dir ./extensions/plugins/vanir_search/solr --ansi
      - cd ../../../
      - cp gulp-config.json.dist.previous tests/extension/aesir-e-commerce/
      - cd tests/extension/aesir-e-commerce
      - mv gulp-config.json.dist.previous build/gulp-config.json
      - cd build
      - git submodule init
      - git submodule update
      - npm install --save-dev
      - node_modules/.bin/gulp release --skip-version
      - ls
      - pwd
      - cd ..
      - ls
      - pwd
      # Copy some page from Aesir-ec
      - cp -R tests/_support/Page/Frontend ../../
      - cp tests/_support/Step/Acceptance/redshopb2b.php ../../
      - cp tests/_support/Step/Acceptance/AdministratorSteps.php ../../
      - cd ../../
      - mv Frontend _support/Page
      - mv redshopb2b.php _support/Step/Acceptance
      - mv AdministratorSteps.php _support/Step/Acceptance

      - cd extension/aesir-e-commerce
      - cp -R tests/_support/Step/Frontend ../../
      - cd ../../
      - mv Frontend _support/Step

  00-setup:
    group: 00-setup
    image: redwebaps/testbox-chromedriver:2.38
    # pull: true
    environment:
      - tests_user=admin
      - tests_suite=00-setup
      - tests_db=setup
      - build_path=/drone/src/github.com/${DRONE_REPO}
      - output_append=-00-a-setup
    commands:
      # Regular entry point
      - /entrypoint.sh &
      # Composer setup
      # - while [ ! -f tests/.cache.composer.tmp ]; do sleep 1; done          # Comment if not using composer cache
      - composer config -g github-oauth.github.com 6f8f19c330a0f899458e4b0670824deb8cdfe391
      - composer install --prefer-dist                                    # Uncomment if not using composer cache
      # NPM setup
      - while [ ! -f tests/.cache.npm.tmp ]; do sleep 1; done               # Comment if not using npm cache
      # - npm install                                                       # Uncomment if not using npm cache
      # Aesir installer release
      - while [ ! -f tests/.cache.composer.library.tmp ]; do sleep 1; done  # Comment if not using composer cache for libraries
      - mv gulp-config.json.dist gulp-config.json
      - gulp release:reditem --skip-version

      # Codeception setup
      - cp tests/acceptance.suite.yml.dist.drone tests/acceptance.suite.yml
      - cp tests/api.suite.yml.dist.drone tests/api.suite.yml
      # Test setup
      # - while [ ! -f tests/.cache.joomla-cms.tmp ]; do sleep 1; done        # Comment if not using Joomla CMS cache
      - vendor/bin/robo tests:site-preparation 1 0
      # Ownership for uid 82
      - chown -R www-data:www-data .
      # Creating first clone for tests setup
      - mkdir -p tests/$tests_suite/joomla-cms
      - rsync -a tests/joomla-cms/ tests/$tests_suite/joomla-cms
      # Creates the database (required because of the Codeception Db module)
      - mysql -u root -proot -h db -e "CREATE DATABASE $tests_db"
      # Execution under uid 82 (www / www-data)
      - while [ ! -f tests/.cache.aesir-core.tmp ]; do sleep 1; done        # Comment if not using Aesir Core cache
      - su www-data -c 'vendor/bin/robo tests:setup 0 0'

  00-setup-stages:
    group: tests
    image: redwebaps/testbox-chromedriver:2.38
    environment:
      - tests_user=admin
      - tests_suite=00-setup
      - tests_db=setup
      - build_path=/drone/src/github.com/${DRONE_REPO}
      - output_append=-00-b-setup-stages
    commands:
      # Final DB dump with full Joomla/extension setup
      - rsync -a --delete tests/$tests_suite/joomla-cms/ tests/joomla-cms
      - sed -i "s/db = '$tests_db'/db = 'tests_db'/g" tests/joomla-cms/configuration.php
      - sed -i "s,$tests_suite/joomla-cms/,joomla-cms/,g" tests/joomla-cms/configuration.php
      - mysqldump -u root -proot -h db $tests_db > tests/dbdump.sql.tmp
      # Stages setup
      - sh tests/drone/setup-stages.sh "visitpatterns"    "01-visit-patterns"
#      - sh tests/drone/setup-stages.sh "modules"          "02-modules"
#      - sh tests/drone/setup-stages.sh "integration"      "03-integration"
#      - sh tests/drone/setup-stages.sh "ctamodulec"       "04-ctamodule-c"
#      - sh tests/drone/setup-stages.sh "templates"        "05-templates"
#      - sh tests/drone/setup-stages.sh "ctamodulea"       "06-ctamodule-a"
#      - sh tests/drone/setup-stages.sh "itemtranslation"  "07-item-translation"
#      - sh tests/drone/setup-stages.sh "types"            "08-types"
#      - sh tests/drone/setup-stages.sh "categories"       "09-categories"
#      - sh tests/drone/setup-stages.sh "countries"        "10-localisation"
#      - sh tests/drone/setup-stages.sh "itemconversion"   "11-item-conversion"
#      - sh tests/drone/setup-stages.sh "notifications"    "12-notifications"
#      - sh tests/drone/setup-stages.sh "visitflows"       "13-visit-flows"
#      - sh tests/drone/setup-stages.sh "items"            "14-items"
#      - sh tests/drone/setup-stages.sh "integrationitems" "15-integration-items"
#      - sh tests/drone/setup-stages.sh "members"          "16-members"
#      - sh tests/drone/setup-stages.sh "organisations"    "17-organisations"
#      - sh tests/drone/setup-stages.sh "splittests"       "18-split-tests"
#      - sh tests/drone/setup-stages.sh "categorytranslation" "19-category-translation"
#      - sh tests/drone/setup-stages.sh "fields"           "20-fields"
      - sh tests/drone/setup-stages.sh "aesirec"          "21-aesir-ec"

  01-visit-patterns:
    group: tests
    image: redwebaps/testbox-chromedriver:2.38
    environment:
      - tests_user=admin
      - tests_suite=01-visit-patterns
      - tests_db=visitpatterns
      - build_path=/drone/src/github.com/${DRONE_REPO}
      - output_append=-01-visit-patterns
    commands:
      # Regular entry point
      - /entrypoint.sh &
      # Performs test after ensuring that the scenario has been fully set up
      - while [ ! -f tests/.cache.setup.$tests_suite.tmp ]; do sleep 1; done
      # Performs test
      - su www-data -c 'vendor/bin/robo tests:run acceptance/administrator/VisitPatterns 0 0'

#  02-modules:
#    group: tests
#    image: redwebaps/testbox-chromedriver:2.38
#    environment:
#      - tests_user=admin
#      - tests_suite=02-modules
#      - tests_db=modules
#      - build_path=/drone/src/github.com/${DRONE_REPO}
#      - output_append=-02-modules
#    commands:
#      # Regular entry point
#      - /entrypoint.sh &
#      # Performs test after ensuring that the scenario has been fully set up
#      - while [ ! -f tests/.cache.setup.$tests_suite.tmp ]; do sleep 1; done
#      # Performs test
#      - su www-data -c 'vendor/bin/robo tests:run acceptance/administrator/Modules 0 0'
#
#  03-integration:
#    group: tests
#    image: redwebaps/testbox-chromedriver:2.38
#    environment:
#      - tests_user=admin
#      - tests_suite=03-integration
#      - tests_db=integration
#      - build_path=/drone/src/github.com/${DRONE_REPO}
#      - output_append=-03-integration
#    commands:
#      # Regular entry point
#      - /entrypoint.sh &
#      # Performs test after ensuring that the scenario has been fully set up
#      - while [ ! -f tests/.cache.setup.$tests_suite.tmp ]; do sleep 1; done
#      # Performs test
#      - su www-data -c 'vendor/bin/robo tests:run acceptance/integration/Integration 0 0'
#
#  04-ctamodule-c:
#    group: tests
#    image: redwebaps/testbox-chromedriver:2.38
#    environment:
#      - tests_user=admin
#      - tests_suite=04-ctamodule-c
#      - tests_db=ctamodulec
#      - build_path=/drone/src/github.com/${DRONE_REPO}
#      - output_append=-04-ctamodule-c
#    commands:
#      # Regular entry point
#      - /entrypoint.sh &
#      # Performs test after ensuring that the scenario has been fully set up
#      - while [ ! -f tests/.cache.setup.$tests_suite.tmp ]; do sleep 1; done
#      # Performs test
#      - su www-data -c 'vendor/bin/robo tests:run acceptance/administrator/CtaModules_C 0 0'
#
#  05-general:
#    group: tests
#    image: redwebaps/testbox-chromedriver:2.38
#    environment:
#      - tests_user=admin
#      - tests_suite=00-setup
#      - tests_db=setup
#      - build_path=/drone/src/github.com/${DRONE_REPO}
#      - output_append=-00-a-setup
#    commands:
#      # Regular entry point
#      - /entrypoint.sh &
#      - sleep 10
#      # Performs test
#      - su www-data -c 'vendor/bin/robo tests:run acceptance/administrator/General 0 0'
#
#  05-templates:
#    group: tests
#    image: redwebaps/testbox-chromedriver:2.38
#    environment:
#      - tests_user=admin
#      - tests_suite=05-templates
#      - tests_db=templates
#      - build_path=/drone/src/github.com/${DRONE_REPO}
#      - output_append=-05-templates
#    commands:
#      # Regular entry point
#      - /entrypoint.sh &
#      # Performs test after ensuring that the scenario has been fully set up
#      - while [ ! -f tests/.cache.setup.$tests_suite.tmp ]; do sleep 1; done
#      # Performs test
#      - su www-data -c 'vendor/bin/robo tests:run acceptance/administrator/Templates 0 0'
#
#  06-ctamodule-a:
#    group: tests
#    image: redwebaps/testbox-chromedriver:2.38
#    environment:
#      - tests_user=admin
#      - tests_suite=06-ctamodule-a
#      - tests_db=ctamodulea
#      - build_path=/drone/src/github.com/${DRONE_REPO}
#      - output_append=-06-ctamodule-a
#    commands:
#      # Regular entry point
#      - /entrypoint.sh &
#      # Performs test after ensuring that the scenario has been fully set up
#      - while [ ! -f tests/.cache.setup.$tests_suite.tmp ]; do sleep 1; done
#      # Performs test
#      - su www-data -c 'vendor/bin/robo tests:run acceptance/administrator/CtaModules_A 0 0'
#
#  07-item-translation:
#    group: tests
#    image: redwebaps/testbox-chromedriver:2.38
#    environment:
#      - tests_user=admin
#      - tests_suite=07-item-translation
#      - tests_db=itemtranslation
#      - build_path=/drone/src/github.com/${DRONE_REPO}
#      - output_append=-07-item-translation
#    commands:
#      # Regular entry point
#      - /entrypoint.sh &
#      # Performs test after ensuring that the scenario has been fully set up
#      - while [ ! -f tests/.cache.setup.$tests_suite.tmp ]; do sleep 1; done
#      # Performs test
#      - su www-data -c 'vendor/bin/robo tests:run acceptance/administrator/ItemTranslation 0 0'
#
#  08-types:
#    group: tests
#    image: redwebaps/testbox-chromedriver:2.38
#    environment:
#      - tests_user=admin
#      - tests_suite=08-types
#      - tests_db=types
#      - build_path=/drone/src/github.com/${DRONE_REPO}
#      - output_append=-08-types
#    commands:
#      # Regular entry point
#      - /entrypoint.sh &
#      # Performs test after ensuring that the scenario has been fully set up
#      - while [ ! -f tests/.cache.setup.$tests_suite.tmp ]; do sleep 1; done
#      # Performs test
#      - su www-data -c 'vendor/bin/robo tests:run acceptance/administrator/Types 0 0'
#
#  09-categories:
#    group: tests
#    image: redwebaps/testbox-chromedriver:2.38
#    environment:
#      - tests_user=admin
#      - tests_suite=09-categories
#      - tests_db=categories
#      - build_path=/drone/src/github.com/${DRONE_REPO}
#      - output_append=-09-categories
#    commands:
#      # Regular entry point
#      - /entrypoint.sh &
#      # Performs test after ensuring that the scenario has been fully set up
#      - while [ ! -f tests/.cache.setup.$tests_suite.tmp ]; do sleep 1; done
#      # Performs test
#      - su www-data -c 'vendor/bin/robo tests:run acceptance/administrator/Categories 0 0'
#
#  10-localisation:
#    group: tests
#    image: redwebaps/testbox-chromedriver:2.38
#    environment:
#      - tests_user=admin
#      - tests_suite=10-localisation
#      - tests_db=countries
#      - build_path=/drone/src/github.com/${DRONE_REPO}
#      - output_append=-10-localisation
#    commands:
#      # Regular entry point
#      - /entrypoint.sh &
#      # Performs test after ensuring that the scenario has been fully set up
#      - while [ ! -f tests/.cache.setup.$tests_suite.tmp ]; do sleep 1; done
#      # Performs test
#      - su www-data -c 'vendor/bin/robo tests:run acceptance/administrator/Localisation 0 0'
#
#  11-item-conversion:
#    group: tests
#    image: redwebaps/testbox-chromedriver:2.38
#    environment:
#      - tests_user=admin
#      - tests_suite=11-item-conversion
#      - tests_db=itemconversion
#      - build_path=/drone/src/github.com/${DRONE_REPO}
#      - output_append=-11-item-conversion
#    commands:
#      # Regular entry point
#      - /entrypoint.sh &
#      # Performs test after ensuring that the scenario has been fully set up
#      - while [ ! -f tests/.cache.setup.$tests_suite.tmp ]; do sleep 1; done
#      # Performs test
#      - su www-data -c 'vendor/bin/robo tests:run acceptance/administrator/ItemConversion 0 0'
#
#  12-notifications:
#    group: tests
#    image: redwebaps/testbox-chromedriver:2.38
#    environment:
#      - tests_user=admin
#      - tests_suite=12-notifications
#      - tests_db=notifications
#      - build_path=/drone/src/github.com/${DRONE_REPO}
#      - output_append=-12-notifications
#    commands:
#      # Regular entry point
#      - /entrypoint.sh &
#      # Performs test after ensuring that the scenario has been fully set up
#      - while [ ! -f tests/.cache.setup.$tests_suite.tmp ]; do sleep 1; done
#      # Performs test
#      - su www-data -c 'vendor/bin/robo tests:run acceptance/integration/Notifications 0 0'
#
#  13-visit-flows:
#    group: tests
#    image: redwebaps/testbox-chromedriver:2.38
#    environment:
#      - tests_user=admin
#      - tests_suite=13-visit-flows
#      - tests_db=visitflows
#      - build_path=/drone/src/github.com/${DRONE_REPO}
#      - output_append=-13-visit-flows
#    commands:
#      # Regular entry point
#      - /entrypoint.sh &
#      # Performs test after ensuring that the scenario has been fully set up
#      - while [ ! -f tests/.cache.setup.$tests_suite.tmp ]; do sleep 1; done
#      # Performs test
#      - su www-data -c 'vendor/bin/robo tests:run acceptance/administrator/VisitFlows 0 0'
#
#  14-items:
#    group: tests
#    image: redwebaps/testbox-chromedriver:2.38
#    environment:
#      - tests_user=admin
#      - tests_suite=14-items
#      - tests_db=items
#      - build_path=/drone/src/github.com/${DRONE_REPO}
#      - output_append=-14-items
#    commands:
#      # Regular entry point
#      - /entrypoint.sh &
#      # Performs test after ensuring that the scenario has been fully set up
#      - while [ ! -f tests/.cache.setup.$tests_suite.tmp ]; do sleep 1; done
#      # Performs test
#      - su www-data -c 'vendor/bin/robo tests:run acceptance/administrator/Items 0 0'
#
#  15-integration-items:
#    group: tests
#    image: redwebaps/testbox-chromedriver:2.38
#    environment:
#      - tests_user=admin
#      - tests_suite=15-integration-items
#      - tests_db=integrationitems
#      - build_path=/drone/src/github.com/${DRONE_REPO}
#      - output_append=-15-integration-items
#    commands:
#      # Regular entry point
#      - /entrypoint.sh &
#      # Performs test after ensuring that the scenario has been fully set up
#      - while [ ! -f tests/.cache.setup.$tests_suite.tmp ]; do sleep 1; done
#      # Performs test
#      - su www-data -c 'vendor/bin/robo tests:run acceptance/integration/Items 0 0'
#
#  16-members:
#    group: tests
#    image: redwebaps/testbox-chromedriver:2.38
#    environment:
#      - tests_user=admin
#      - tests_suite=16-members
#      - tests_db=members
#      - build_path=/drone/src/github.com/${DRONE_REPO}
#      - output_append=-16-members
#    commands:
#      # Regular entry point
#      - /entrypoint.sh &
#      # Performs test after ensuring that the scenario has been fully set up
#      - while [ ! -f tests/.cache.setup.$tests_suite.tmp ]; do sleep 1; done
#      # Performs test
#      - su www-data -c 'vendor/bin/robo tests:run acceptance/administrator/Members 0 0'
#
#  17-organisations:
#    group: tests
#    image: redwebaps/testbox-chromedriver:2.38
#    environment:
#      - tests_user=admin
#      - tests_suite=17-organisations
#      - tests_db=organisations
#      - build_path=/drone/src/github.com/${DRONE_REPO}
#      - output_append=-17-organisations
#    commands:
#      # Regular entry point
#      - /entrypoint.sh &
#      # Performs test after ensuring that the scenario has been fully set up
#      - while [ ! -f tests/.cache.setup.$tests_suite.tmp ]; do sleep 1; done
#      # Performs test
#      - su www-data -c 'vendor/bin/robo tests:run acceptance/administrator/Organisations 0 0'
#
#  18-split-tests:
#    group: tests
#    image: redwebaps/testbox-chromedriver:2.38
#    environment:
#      - tests_user=admin
#      - tests_suite=18-split-tests
#      - tests_db=splittests
#      - build_path=/drone/src/github.com/${DRONE_REPO}
#      - output_append=-18-split-tests
#    commands:
#      # Regular entry point
#      - /entrypoint.sh &
#      # Performs test after ensuring that the scenario has been fully set up
#      - while [ ! -f tests/.cache.setup.$tests_suite.tmp ]; do sleep 1; done
#      # Performs test
#      - su www-data -c 'vendor/bin/robo tests:run acceptance/administrator/SplitTests 0 0'
#
#  19-category-translation:
#    group: tests
#    image: redwebaps/testbox-chromedriver:2.38
#    environment:
#      - tests_user=admin
#      - tests_suite=19-category-translation
#      - tests_db=categorytranslation
#      - build_path=/drone/src/github.com/${DRONE_REPO}
#      - output_append=-19-category-translation
#    commands:
#      # Regular entry point
#      - /entrypoint.sh &
#      # Performs test after ensuring that the scenario has been fully set up
#      - while [ ! -f tests/.cache.setup.$tests_suite.tmp ]; do sleep 1; done
#      # Performs test
#      - su www-data -c 'vendor/bin/robo tests:run acceptance/administrator/CategoryTranslation 0 0'
#
#  20-fields:
#    group: tests
#    image: redwebaps/testbox-chromedriver:2.38
#    environment:
#    - tests_user=admin
#    - tests_suite=20-fields
#    - tests_db=fields
#    - build_path=/drone/src/github.com/${DRONE_REPO}
#    - output_append=-20-fields
#    commands:
#    # Regular entry point
#    - /entrypoint.sh &
#    # Performs test after ensuring that the scenario has been fully set up
#    - while [ ! -f tests/.cache.setup.$tests_suite.tmp ]; do sleep 1; done
#    # Performs test
#    - su www-data -c 'vendor/bin/robo tests:run acceptance/administrator/Fields 0 0'

  21-aesir-ec:
    group: tests
    image: redwebaps/testbox-chromedriver:2.38
    environment:
      - tests_user=admin
      - tests_suite=21-aesir-ec
      - tests_db=aesirec
      - build_path=/drone/src/github.com/${DRONE_REPO}
      - output_append=-21-aesir-ec
    commands:
      # Regular entry point
      - /entrypoint.sh &
      # Performs test after ensuring that the scenario has been fully set up
      - while [ ! -f tests/.cache.setup.$tests_suite.tmp ]; do sleep 1; done
      # Performs test
      - su www-data -c 'vendor/bin/robo tests:run acceptance/integration/AesirEc 1 1'

  slack:
    image: plugins/slack
    webhook: https://hooks.slack.com/services/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
    channel: aesir-builds
    when:
      status: [ success, failure ]
    template: >
      {{#success build.status}}
        {{repo.name}} PR #{{build.pull}} succeeded in {{since build.started}}. Good job {{build.author}}!  Here is the build log: {{build.link}}.  Link to the PR: https://github.com/{{repo.owner}}/{{repo.name}}/pull/{{build.pull}}
      {{else}}
        {{repo.name}} PR #{{build.pull}} failed in {{since build.started}}. Fix me please {{build.author}}!  Here is the build log: {{build.link}}.  Link to the PR: https://github.com/{{repo.owner}}/{{repo.name}}/pull/{{build.pull}}
      {{/success}}

  error-report:
    image: redwebaps/testbox-chromedriver:2.38
    commands:
      - if [ -z "${CI_PULL_REQUEST}" ]; then export CI_PULL_REQUEST=1; fi
      - vendor/bin/robo send:build-report-error-slack redcomponent 365447364384436 Q94UM5kjZkZIrau8MIL93m0dN6U "$CI_REPO" "$CI_PULL_REQUEST" "https://hooks.slack.com/services/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" "#aesir-builds" "$CI_BUILD_URL"
    when:
      status: [ failure ]

services:
  db:
    image: mysql/mysql-server:5.7
    # pull: true
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_ROOT_HOST=%

  php:
    image: redwebaps/php-apache:7.0
    # pull: true
    environment:
      - WEB_DOCUMENT_ROOT=/drone/src/github.com/${DRONE_REPO}
      - JOOMLA_INSTALLATION_DISABLE_LOCALHOST_CHECK=1

branches:
  exclude: [ crowdin ]
